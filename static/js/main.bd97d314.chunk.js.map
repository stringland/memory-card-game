{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","cardFlipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","matchCnt","setMatchCnt","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","prevMatchCnt","resetTurn","setTimeout","prevTurns","style","display","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAEe,SAASA,EAAT,GAAoE,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAQlE,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAc,UAAY,GAA1C,UACI,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACIF,UAAU,OACVC,IAAI,8DACJE,QAbI,WACXJ,GACDF,EAAaD,IAYLM,IAAI,mBCbxB,IAAME,EAAa,CACjB,CAAE,IAAO,+DAAgEC,SAAS,GAClF,CAAE,IAAO,+DAAgEA,SAAS,GAClF,CAAE,IAAO,6DAA8DA,SAAS,GAChF,CAAE,IAAO,+DAAgEA,SAAS,GAClF,CAAE,IAAO,+DAAgEA,SAAS,GAClF,CAAE,IAAO,8DAA+DA,SAAS,IAuFpEC,MApFf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAkCR,mBAAS,MAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAgCV,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBmB,EAAjB,KAGMC,EAAe,WACnB,IAAMC,EAAgB,UAAIhB,EAAeA,GACtCiB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC5B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB6B,GAAIH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbR,EAASW,GACTT,EAAS,GACTE,EAAY,IAIRhB,EAAe,SAACD,GACpBkB,EAAYG,EAAarB,GAAQmB,EAAanB,IAIhD8B,qBAAU,WACRP,MACC,IAGHO,qBAAU,WACJZ,GAAaE,IACfE,GAAY,GACRJ,EAAUb,MAAQe,EAAUf,KAC9BQ,GAAS,SAAAkB,GACP,OAAOA,EAAUH,KAAI,SAAC5B,GACpB,OAAIA,EAAKK,MAAQa,EAAUb,IAClB,2BAAKL,GAAZ,IAAkBS,SAAS,IAEpBT,QAIbiB,GAAY,SAAAe,GAAY,OAAIA,EAAe,KAC3CC,KAEAC,YAAW,kBAAMD,MAAa,QAGjC,CAACf,EAAWE,EAAWJ,IAG1B,IAAMiB,EAAY,WAChBd,EAAa,MACbE,EAAa,MACbN,GAAS,SAAAoB,GAAS,OAAIA,EAAY,KAClCb,GAAY,IAGd,OACE,sBAAKlB,UAAU,MAAf,UACE,4CACA,oDACA,wBAAQG,QAASgB,EAAjB,sBACA,wCAAWT,KACX,mBAAGsB,MAAO,CAACC,QAAsB,IAAbrB,EAAiB,QAAU,QAA/C,4FACA,qBAAKZ,UAAU,YAAf,SACGQ,EAAMgB,KAAI,SAAC5B,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,YAAaF,IAASkB,GAAalB,IAASoB,GAAapB,EAAKS,QAC9DN,SAAUA,GAJLH,EAAK6B,aCjFtBS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bd97d314.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport default function SingleCard({ card, handleChoice, cardFlipped, disabled }) {    // destructure card and handleChoice props from App\r\n\r\n    const handleClick = () => {\r\n        if (!disabled) {\r\n            handleChoice(card);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className={cardFlipped ? \"flipped\" : \"\"}>\r\n                <img className=\"front\" src={card.src} alt=\"Card front\" />\r\n                <img\r\n                    className=\"back\"\r\n                    src=\"https://stringland.github.io/memory-card-game/img/cover.png\"\r\n                    onClick={handleClick}\r\n                    alt=\"Card back\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\n\n// array of card images\nconst cardImages = [\n  { \"src\": \"https://stringland.github.io/memory-card-game/img/helmet.png\", matched: false },\n  { \"src\": \"https://stringland.github.io/memory-card-game/img/potion.png\", matched: false },\n  { \"src\": \"https://stringland.github.io/memory-card-game/img/ring.png\", matched: false },\n  { \"src\": \"https://stringland.github.io/memory-card-game/img/scroll.png\", matched: false },\n  { \"src\": \"https://stringland.github.io/memory-card-game/img/shield.png\", matched: false },\n  { \"src\": \"https://stringland.github.io/memory-card-game/img/sword.png\", matched: false },\n]\n\nfunction App() {\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [matchCnt, setMatchCnt] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // shuffle cards, duplicate cards to get set of 12, assign random ID to each\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]      // 2 lots of card images\n      .sort(() => Math.random() - 0.5)                        // shuffled array\n      .map((card) => ({ ...card, id: Math.random() }))        // add on random ID number to each card\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n    setMatchCnt(0);\n  }\n\n  // handle a user choice, update choice one or two\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)        // if choiceOne is null (is false), update with setChoiceOne, else update choiceTwo with setChoiceTwo\n  }\n\n  // reset game automagically\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  // compare two selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true }\n            } else {\n              return card;\n            }\n          })\n        })\n        setMatchCnt(prevMatchCnt => prevMatchCnt + 1)\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo, matchCnt])\n\n  // reset choices and increase number of turns\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Card Match</h1>\n      <h5>A memory card game</h5>\n      <button onClick={shuffleCards}>New Game</button>\n      <p>Turns: {turns}</p>\n      <p style={{display: matchCnt === 6 ? \"block\" : \"none\" }}>Congrats! You find all the matches. Click New Game button to restart the game.</p>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            cardFlipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}